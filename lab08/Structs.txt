EX 1 -------------

#include <stdio.h>
#include <stdlib.h>

/*1. Escreva um trecho de código para fazer a criação dos novos tipos de dados conforme
solicitado abaixo:
- Horário: composto de hora, minutos e segundos.
- Data: composto de dia, mês e ano.
- Compromisso: composto de uma data, horário e texto que descreve o compromisso.*/

int main(void)
{
    struct horario{
        int hora, minutos, segundos;
    };
    struct data{
        int dia, mes, ano;
    };
    struct compromisso{
        struct data data_comp;
        struct hora hora_comp;
        char descricao[101];
        
    };
}
EX 2 ---------------

#include <stdio.h>
#include <stdlib.h>

/*2. Implemente um programa que leia o nome, a idade e o endereço de uma pessoa e armazene
os dados em uma estrutura.*/

int main()
{
    struct cadastro{
        int idade;
        char nome[20];
        char endereco[101];
    };

    struct cadastro pessoa;
    printf("Digite o nome de uma pessoa: \n");
    fflush(stdin);
    fgets(pessoa.nome, 20, stdin);

    printf("Digite a idade dessa pessoa: \n");
    fflush(stdin);
    scanf("%d", &pessoa.idade);

    printf("Digite o endereco dessa pessoa: \n");
    fflush(stdin);
    fgets(pessoa.endereco, 101, stdin);

    printf("CADASTRO REGISTRADO: \n");
    printf("NOME: %s\n", pessoa.nome);
    printf("IDADE: %d\n", pessoa.idade);
    printf("ENDERECO: %s\n", pessoa.endereco);
}

EX 3 ---------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*3. Construa uma estrutura aluno com nome, número de matrıcula e curso. Leia do usuário a
informação de 5 alunos, armazene em um vetor dessa estrutura e imprima os dados na tela.*/

int main()
{
    struct cadastro{
        char matricula[30];
        char nome[30];
        char curso[30];
    };

    struct cadastro a[5];


    int i;

    for (i = 0; i < 5; i++){
        printf("Nome: \n");
        fflush(stdin);
        fgets(a[i].nome, 30, stdin);

        printf("Matricula: \n");
        fflush(stdin);
        fgets(a[i].matricula, 30, stdin);

        printf("Curso: \n");
        fflush(stdin);
        fgets(a[i].curso, 30, stdin);
        system("cls");
    }
    for (i = 0; i < 5; i ++){
        printf("CADASTRO [%d]\n", i+1);
        printf("Nome: %s\n", a[i].nome);
        printf("Matricula: %s\n", a[i].matricula);
        printf("Curso: %s\n", a[i].curso);
    }
}

EX 4 --------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*4. Crie uma estrutura representando os alunos de um determinado curso. A estrutura deve
conter a matrícula do aluno, nome, nota da primeira prova, nota da segunda prova e nota
da terceira prova.
a) Permita ao usuário entrar com os dados de 5 alunos;
b) Encontre o aluno com maior nota da primeira prova;
c) Encontre o aluno com maior média geral;
d) Encontre o aluno com menor média geral;
e) Para cada aluno diga se ele foi aprovado ou reprovado, considerando o valor 6 para
aprovação.
    */

int main()
{
    struct cadastro{
        char matricula[30];
        char nome[30];
        float nota[3];

    };

    struct cadastro alunos[5];


    int i, maiornota_indice, menormedia_indice, maiormedia_indice ;
    float maior = 0, menor = 0, media_geral[5], media_aux;

    for (i = 0; i < 5; i++){
        printf("Nome: \n");
        fflush(stdin);
        fgets(alunos[i].nome, 30, stdin);

        printf("Matricula: \n");
        fflush(stdin);
        fgets(alunos[i].matricula, 30, stdin);

        printf("Nota 1: \n");
        fflush(stdin);
        scanf("%f", &alunos[i].nota[0]);

        printf("Nota 2: \n");
        fflush(stdin);
        scanf("%f", &alunos[i].nota[1]);

        printf("Nota 3: \n");
        fflush(stdin);
        scanf("%f", &alunos[i].nota[2]);
        system("cls");
        media_geral[i] = (alunos[i].nota[0] + alunos[i].nota[1] + alunos[i].nota[2]) / 3;

        }

        for (i = 0; i < 5; i++){
            if(alunos[i].nota[0]>maior){
                maiornota_indice = i;
            }
        }
        media_aux = media_geral[0];

        for (i = 0; i < 5; i++){
            if (media_geral[i] > media_aux){
                maiormedia_indice = i;
            }
            if (media_geral[i] < media_aux){
                menormedia_indice = i;
            }
        }

        printf("\nMaior nota1: %s nota1: %.2f\n",alunos[maiornota_indice].nome);
        printf("\nMaior media geral: %s  Media geral: %.2f\n", alunos[maiormedia_indice].nome);
        printf("\nMenor media geral: %s  Media geral: %.2f\n", alunos[menormedia_indice].nome);


        for (i = 0; i < 5; i++){
            printf("ALUNO: %s\n", alunos[i].nome);
            printf("SITUACAO: \n");
            if((alunos[i].nota[0] + alunos[i].nota[1] + alunos[i].nota[2]) >= 6){
                printf("APROVADO\n");
            }else{
                if((alunos[i].nota[0] + alunos[i].nota[1] + alunos[i].nota[2]) < 6){
                    printf("REPROVADO\n");
                }

            }
        }
}


EX 5 --------------

#include <stdio.h>

/*
Considerando a estrutura  
struct vetor { 
 float a; 
 float b; 
 float c; 
};  
para  representar  um  vetor  no  R3,  implemente  um  programa  que  calcule  a  soma  de  dois 
vetores.
*/

struct Vetor {
    float a;
    float b;
    float c;
};

int main()
{
    struct Vetor vetorx, vetory, vetorz;

    printf("Digite o valor de a do primeiro vetor: ");
    scanf("%f", &vetorx.a);
    printf("Digite o valor de b do primeiro vetor: ");
    scanf("%f", &vetorx.b);
    printf("Digite o valor de c do primeiro vetor: ");
    scanf("%f", &vetorx.c);
    printf("Digite o valor de a do segundo vetor: ");
    scanf("%f", &vetory.a);
    printf("Digite o valor de b do segundo vetor: ");
    scanf("%f", &vetory.b);
    printf("Digite o valor de c do segundo vetor: ");
    scanf("%f", &vetory.c);

    vetorz.a = vetorx.a + vetory.a;
    vetorz.b = vetorx.b + vetory.b;
    vetorz.c = vetorx.c + vetory.c;
    
    printf("Vetor 1: (%.2f, %.2f, %.2f)\n", vetorx.a, vetorx.b, vetorx.c);
    printf("Vetor 2: (%.2f, %.2f, %.2f)\n", vetory.a, vetory.b, vetory.c);
    printf("Vetor 3: (%.2f, %.2f, %.2f)\n", vetorz.a, vetorz.b, vetorz.c);

    return 0;
}


EX 6-----------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*6. Faça um programa que armazene em um registro de dados (estrutura composta) os dados
de um funcionário de uma empresa, compostos de: Nome, Idade, Sexo (M/F), CPF, Data de
Nascimento, Código do Setor onde trabalha (0-99), Cargo que ocupa (string de até 30
caracteres) e Salário. Os dados devem ser digitados pelo usuário, armazenados na estrutura
e exibidos na tela.
*/

int main()
{
    struct registro{
        char nome[30], cargo[30], sexo;
        int dia, mes, ano, codigo, cpf, idade;
        float salario;


    };
    struct registro Func;

    printf("REGISTRO DE FUNCIONARIO\n");

    printf("Digite o nome: \n");
    fflush(stdin);
    scanf("%s", &Func.nome);

    printf("Digite a idade: \n");
    fflush(stdin);
    scanf("%d", &Func.idade);

    printf("Digite o sexo(M/F): \n");
    fflush(stdin);
    scanf("%c", &Func.sexo);

    printf("Digite o CPF: \n");
    fflush(stdin);
    scanf("%d", &Func.cpf);

    printf("Digite a data do nascimento:\n");
    printf("Dia: \n");
    fflush(stdin);
    scanf("%d", &Func.dia);

    printf("Mes: \n");
    fflush(stdin);
    scanf("%d", &Func.mes);

    printf("Ano: \n");
    fflush(stdin);
    scanf("%d", &Func.ano);

    printf("Digite o Codigo do Setor: \n");
    fflush(stdin);
    scanf("%d", &Func.codigo);

    printf("Digite o Cargo que Ocupa: \n");
    fflush(stdin);
    scanf("%s", &Func.cargo);

    printf("Digite o salario: R$");
    fflush(stdin);
    scanf("%f", &Func.salario);

    system("cls");

    printf("REGISTRO DE FUNCIONARIO\n INFORMACOES:\n");
    printf("NOME: %s \n", Func.nome);
    printf("SEXO: %c\n", Func.sexo);
    printf("IDADE: %d\n", Func.idade);
    printf("CPF: %d\n", Func.cpf);
    printf("DATA DE NASCIMENTO: %d/%d/%d\n", Func.dia, Func.mes, Func.ano);
    printf("CODIGO DO SETOR: %d\n", Func.codigo);
    printf("CARGO: %s\n", Func.cargo);
    printf("SALARIO: R$%.2f\n", Func.salario);




}


EX 7-----------------------

#include <stdio.h>
#include <string.h>

/*Ex 7.Utilizando uma estrutura, faça um programa que  permita a entrada de nome, endereço e
telefone de 5 pessoas e os imprima em ordem alfabética.
*/

struct Pessoa
{
  char nome[100];
  char endereco[100];
  char telefone[100];
};

int main()
{
  struct Pessoa pessoas[5];

  for (int i = 0; i < 5; i++)
  {
    printf("Digite o nome da pessoa %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(pessoas[i].nome, 100, stdin);

    printf("Digite o endereço da pessoa %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(pessoas[i].endereco, 100, stdin);

    printf("Digite o telefone da pessoa %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(pessoas[i].telefone, 100, stdin);
    printf("\n");
  }

  int ordenacao[5];
  for (int i = 0; i < 5; i++)
  {
    ordenacao[i] = i;
  }

  for (int i = 0; i < 5; i++)
  {
    for (int j = 0; j < 5; j++)
    {
      if (strcmp(pessoas[ordenacao[i]].nome, pessoas[ordenacao[j]].nome) < 0)
      {
        int aux = ordenacao[i];
        ordenacao[i] = ordenacao[j];
        ordenacao[j] = aux;
      }
    }
  }

  for (int i = 0; i < 5; i++)
  {
    printf("Nome: %s\n", pessoas[ordenacao[i]].nome);
    printf("Endereço: %s\n", pessoas[ordenacao[i]].endereco);
    printf("Telefone: %s\n", pessoas[ordenacao[i]].telefone);
    printf("\n");
  }

  return 0;
}

EX 8-----------------------

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/*EX 8 - Escolha um jogo de cartas, baseado em um “baralho tradicional” (cada carta tem seu naipe
e  seu  valor).  Implemente  a  parte  de  distribuição  (sorteio)  de  cartas  para  2  jogadores,
considerando que cada jogador irá receber 3 cartas. Exiba na tela as cartas que cada um dos
jogadores recebeu.
*/
#define NUM_DE_CARTAS 3
#define NUM_DE_JOGADORES 2


struct Carta
{
  char naipe[10];
  char valor[1];
};

void main()
{
  srand(time(NULL));

  char *NAIPES[4] = {"Paus", "Copas", "Espadas", "Ouros"},
       *VALORES[13] = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"};

  for (int j = 1; j <= NUM_DE_JOGADORES; j++)
  {
    printf("Jogador %d:\n", j);
    for (int i = 1; i <= NUM_DE_CARTAS; i++)
    {
      printf("Carta %d: %s Naipé: %s\n", i, VALORES[rand() % 13], NAIPES[rand() % 4]);
    }
    printf("\n");
  }
}

EX 9-----------------------

#include <stdio.h>

/*Ex 9 Faça um programa que leia um vetor com os dados de 5 carros: marca (máximo 15 letras),
ano e preço. Leia um valor p e mostre as informações de todos os carros com preço menor
que p. Repita este processo até que seja lido um valor p = 0.
*/

struct Carro
{
  char marca[15];
  int ano;
  float preco;
};

int main(void)
{
  struct Carro carros[5];
  for (int j = 0; j < 5; j++)
  {
    printf("Insira a marca do carro %d: ", j + 1);
    setbuf(stdin, NULL);
    fgets(carros[j].marca, 15, stdin);
    printf("Insira o ano do carro %d: ", j + 1);
    scanf("%d", &carros[j].ano);
    printf("Insira o preco do carro %d: ", j + 1);
    scanf("%f", &carros[j].preco);
    printf("\n");
  }

  float p;
  printf("Insira um valor para p: ");
  scanf("%f", &p);
  while (p != 0)
  {
    for (int i = 0; i < 5; i++)
    {
      if (carros[i].preco < p)
      {
        printf("Marca: %s\nAno: %d\nPreco: %.2f\n\n", carros[i].marca, carros[i].ano, carros[i].preco);
      }
    }
    printf("Insira um valor para p: ");
    scanf("%f", &p);
  }

}

EX 10 -----------------------


#include <stdio.h>

/*Ex 10 - Faça um programa que leia um vetor com dados de 5 livros: título (máximo 30 letras), autor 
(máximo 15  letras)  e  ano. Procure  um  livro  por  título,  perguntando  ao  usuário qual  título 
deseja buscar. Mostre os dados de todos os livros encontrados.
*/
struct Livro
{
  char titulo[30];
  char autor[15];
  int ano;
};

int main(void)
{
  struct Livro livros[5];
  for (int j = 0; j < 5; j++)
  {
    printf("Insira o título do livro %d: ", j + 1);
    setbuf(stdin, NULL);
    fgets(livros[j].titulo, 30, stdin);    
    printf("Insira o autor do livro %d: ", j + 1);
    setbuf(stdin, NULL);
    fgets(livros[j].autor, 15, stdin);    
    printf("Insira o ano do livro %d: ", j + 1);
    scanf("%d", &livros[j].ano);
    printf("\n");
  }

  char titulo[30];
  printf("Insira o título do livro que deseja buscar: ");
  scanf("%s", titulo);
  for (int j = 0; j < 5; j++)
  {
    if (strcmp(livros[j].titulo, titulo) == 0)
    {
      printf("Título: %s\nAutor: %s\nAno: %d\n\n", livros[j].titulo, livros[j].autor, livros[j].ano);
    }
  }


}

EX 11 -----------------------

#include <stdio.h>

/*11 - Faça um programa que seja uma agenda de compromissos e: 
 Crie e leia um vetor de 5 estruturas de dados com: compromisso (máximo 60 letras) e 
data. A data deve ser outra estrutura de dados contendo dia, mês e ano; 
 Leia dois inteiros M e A e mostre todos os compromissos do mês M do ano A. Repita o 
procedimento até ler M = 0. 
*/

struct Data
{
  int dia;
  int mes;
  int ano;
};

struct Compromisso
{
  char compromisso[60];
  struct Data data;
};

int main()
{
  struct Compromisso compromissos[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Nomeie o compromisso %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(compromissos[i].compromisso, 60, stdin);    
    printf("Insira o dia do compromisso %d: ", i + 1);
    scanf("%d", &compromissos[i].data.dia);
    printf("Insira o mês do compromisso %d: ", i + 1);
    scanf("%d", &compromissos[i].data.mes);
    printf("Insira o ano do compromisso %d: ", i + 1);
    scanf("%d", &compromissos[i].data.ano);
    printf("\n");
  }

  int m, a;
  printf("Insira um mês: ");
  scanf("%d", &m);
  printf("Insira um ano: ");
  scanf("%d", &a);
  while (m != 0)
  {
    for (int i = 0; i < 5; i++)
    {
      if (compromissos[i].data.mes == m && compromissos[i].data.ano == a)
      {
        printf("Compromisso: %s\nDia: %d\nMês: %d\nAno: %d\n\n", compromissos[i].compromisso, compromissos[i].data.dia, compromissos[i].data.mes, compromissos[i].data.ano);
      }
    }
    printf("Insira um mês: ");
    scanf("%d", &m);
    printf("Insira um ano: ");
    scanf("%d", &a);
  }

  return 0;
}

EX 12 -----------------------


#include <stdio.h>

/*12 - Faça um programa que controla o consumo de energia dos eletrodomésticos de sua casa e:
 Crie e leia 5 eletrodomésticos que contém nome (máximo 15 letras), potência (real, em
kW) e tempo ativo por dia (real, em horas);
 Leia  um  tempo  t  (em  dias),  calcule  e  mostre  o  consumo  total  na  casa  e  o  consumo
relativo de cada eletrodoméstico (consumo/consumo total) nesse período de tempo.
Apresente este último dado em porcentagem.
*/

struct aparelho
{
  char nome[15];
  float potencia;
  float tempo_ativo;
};

int main(void)
{
  struct aparelho eletrodomesticos[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Insira o nome do eletrodomestico %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(eletrodomesticos[i].nome, 15, stdin);
    printf("Insira a potencia do eletrodomestico %d: ", i + 1);
    scanf("%f", &eletrodomesticos[i].potencia);
    printf("Insira o tempo ativo do eletrodomestico %d: ", i + 1);
    scanf("%f", &eletrodomesticos[i].tempo_ativo);
    printf("\n");
  }

  int t;
  printf("Insira um valor para t: ");
  scanf("%d", &t);
  float consumo_total = 0;
  for (int i = 0; i < 5; i++)
  {
    consumo_total += eletrodomesticos[i].potencia * eletrodomesticos[i].tempo_ativo * t;
  }
  printf("Consumo total: %.2f\n", consumo_total);
  for (int i = 0; i < 5; i++)
  {
    printf("Consumo relativo do eletrodomestico %d: %.2f%%\n", i + 1, (eletrodomesticos[i].potencia * eletrodomesticos[i].tempo_ativo * t) / consumo_total * 100);
  }


}



EX 13 -----------------------


#include <stdio.h>

/*13 - Faça um programa que gerencie o estoque de um mercado e: 
 Crie e  leia um vetor de 5 produtos, com os dados:  código (inteiro),  nome (máximo 15 
letras), preço e quantidade; 
 Leia  um  pedido,  composto  por  um  código  de  produto  e  a  quantidade.  Localize  este 
código no vetor e, se houver quantidade suficiente para atender ao pedido 
integralmente, atualize o estoque e informe o usuário. Repita este processo até ler um 
código igual a zero. 
Se por algum motivo não for possível atender ao pedido, mostre uma mensagem 
informando qual erro ocorreu.
*/

struct Produto
{
  int codigo;
  char nome[15];
  float preco;
  int quantidade;
};

int main(void)
{
  struct Produto produtos[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Digite o código do produto %d: ", i + 1);
    scanf("%d", &produtos[i].codigo);
    
    printf("Digite o nome do produto %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(produtos[i].nome, 15, stdin);  
      
    printf("Digite o preço do produto %d: ", i + 1);
    scanf("%f", &produtos[i].preco);
    
    printf("Digite a quantidade do produto %d: ", i + 1);
    scanf("%d", &produtos[i].quantidade);
    printf("\n");
  }

  int codigo, quantidade;
  
  printf("Digite o código do produto que deseja comprar: ");
  scanf("%d", &codigo);
  
  while (codigo != 0)
  {
    printf("Digite a quantidade do produto que deseja comprar: ");
    scanf("%d", &quantidade);
    for (int i = 0; i < 5; i++)
    {
      if (produtos[i].codigo == codigo)
      {
        if (produtos[i].quantidade >= quantidade)
        {
          produtos[i].quantidade -= quantidade;
          printf("Compra realizada com sucesso!\n\n");
        }
        else
        {
          printf("Não há quantidade suficiente para atender ao pedido!\n");
        }
      }
    }
    
    printf("Digite o código do produto que deseja comprar: ");
    scanf("%d", &codigo);
  }


}

EX 14 -----------------------


#include <stdio.h>

/* 14 - Faça um programa que controle o fluxo de voos nos aeroportos de um país. Com V = 5 (voos) 
e A = 5 (aeroportos) e: 
 Crie e leia um vetor de voos, sendo que cada voo  contém um código de aeroporto de 
origem e um de destino; 
 Crie um vetor de aeroportos, sendo que cada aeroporto contém seu código, quantidade 
de voos que saem e quantidade de voos que chegam. 
Nota:  Cada  aeroporto  é  identificado  por  um  código  inteiro  entre  0  e  (A-1).  Não  aceite 
aeroportos de código inexistente
*/

struct Voo
{
  int codigo_origem;
  int codigo_destino;
};

struct Aeroporto
{
  int codigo;
  int voos_saindo;
  int voos_chegando;
};

int main(void)
{
  struct Voo voos[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Digite o código do aeroporto de origem do voo %d: ", i + 1);
    scanf("%d", &voos[i].codigo_origem);
    printf("Digite o código do aeroporto de destino do voo %d: ", i + 1);
    scanf("%d", &voos[i].codigo_destino);
    printf("\n");
  }

  struct Aeroporto aeroportos[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Digite o código do aeroporto %d: ", i + 1);
    scanf("%d", &aeroportos[i].codigo);
    aeroportos[i].voos_saindo = 0;
    aeroportos[i].voos_chegando = 0;
    printf("\n");
  }

  for (int i = 0; i < 5; i++)
  {
    for (int j = 0; j < 5; j++)
    {
      if (voos[i].codigo_origem == aeroportos[j].codigo)
      {
        aeroportos[j].voos_saindo++;
      }
      if (voos[i].codigo_destino == aeroportos[j].codigo)
      {
        aeroportos[j].voos_chegando++;
      }
    }
  }

  for (int i = 0; i < 5; i++)
  {
    printf("Aeroporto %d: %d voos saindo e %d voos chegando\n", aeroportos[i].codigo, aeroportos[i].voos_saindo, aeroportos[i].voos_chegando);
  }


}


EX 15 -----------------------


#include <stdio.h>
#include <string.h>

/*15 - Faça um programa para armazenar um livro de receitas e: 
 Crie  um  vetor  de  5  receitas,  que  deve  ter  nome  (máximo  25  letras),  quantidade  de 
ingredientes e ingredientes; 
 Para cada receita, leia seu nome e a quantidade de ingredientes. Então crie e leia o vetor 
de ingredientes, sendo que cada ingrediente contém nome e quantidade; 
 Procure receita por nome, mostrando seus ingredientes se encontrar. Se não encontrar, 
informe ao usuário. Repita o processo até digitar uma string vazia. 
*/

struct ingr
{
  char nome[25];
  int quantidade;
};

struct Receita
{
  char nome[25];
  int quantidade_ingredientes;
  struct ingr ingredientes[5];
};

int main(void)
{
  struct Receita receitas[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Digite o nome da receita %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(receitas[i].nome, 25, stdin);    

    printf("Digite a quantidade de ingredientes da receita %d: ", i + 1);
    scanf("%d", &receitas[i].quantidade_ingredientes);

    for (int j = 0; j < receitas[i].quantidade_ingredientes; j++)
    {
      printf("Digite o nome do ingrediente %d da receita %d: ", j + 1, i + 1);
      setbuf(stdin, NULL);
      fgets(receitas[i].ingredientes[j].nome, 25, stdin);      

      printf("Digite a quantidade do ingrediente %d da receita %d: ", j + 1, i + 1);
      scanf("%d", &receitas[i].ingredientes[j].quantidade);
    }
    printf("\n");
  }

  char nome[25];
  printf("Digite o nome da receita que deseja procurar: ");
  scanf("%s", nome);
  while (nome[0] != '\0')
  {
    for (int i = 0; i < 5; i++)
    {
      if (strcmp(receitas[i].nome, nome) == 0)
      {
        printf("Ingredientes da receita %s: ", receitas[i].nome);
        for (int j = 0; j < receitas[i].quantidade_ingredientes; j++)
        {
          printf("%s (%d), ", receitas[i].ingredientes[j].nome, receitas[i].ingredientes[j].quantidade);
        }
        printf("\n\n");
      }
    }
    printf("Digite o nome da receita que deseja procurar: ");
    scanf("%s", nome);
  }

}

EX 16 -----------------------



#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/*16 - Faça um programa que armazena filmes produzidos por vários diretores e: 
 Crie  e  leia  um  vetor  de  5  diretores,  cada  um  contendo  nome  (máximo  20  letras), 
quantidade de filmes e filmes. O membro filmes é um vetor, que deve ser criado após 
ter lido quantidade de filmes. Cada filme é composto por nome, ano e duração; 
 Procure um diretor por nome, mostrando todos os filmes que ele já produziu. Repita o 
processo até digitar uma string vazia. 
*/

struct Filme
{
  char nome[20];
  int ano;
  int duracao;
};

struct Diretor
{
  char nome[20];
  int quantidade_filmes;
  struct Filme *filmes;
};

int main(void)
{
  struct Diretor diretores[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Digite o nome do diretor %d: ", i + 1);
    setbuf(stdin, NULL);
    fgets(diretores[i].nome, 20, stdin);
    
    printf("Digite a quantidade de filmes do diretor %d: ", i + 1);
    scanf("%d", &diretores[i].quantidade_filmes);
    diretores[i].filmes = (struct Filme *)malloc(diretores[i].quantidade_filmes * sizeof(struct Filme));
    
    for (int j = 0; j < diretores[i].quantidade_filmes; j++)
    {
      printf("Digite o nome do filme %d do diretor %d: ", j + 1, i + 1);
      setbuf(stdin, NULL);
      fgets(diretores[i].filmes[j].nome, 20, stdin);

      printf("Digite o ano do filme %d do diretor %d: ", j + 1, i + 1);
      scanf("%d", &diretores[i].filmes[j].ano);

      printf("Digite a duracao do filme %d do diretor %d: ", j + 1, i + 1);
      scanf("%d", &diretores[i].filmes[j].duracao);
    }
    printf("\n");
  }

  char nome[20];
  printf("Digite o nome do diretor que deseja procurar: ");
  setbuf(stdin, NULL);
  fgets(nome, 20, stdin);
    
  while (nome[0] != '\0')
  {
    for (int i = 0; i < 5; i++)
    {
      if (strcmp(diretores[i].nome, nome) == 0)
      {
        printf("Filmes do diretor %s: ", diretores[i].nome);
        for (int j = 0; j < diretores[i].quantidade_filmes; j++)
        {
          printf("%s (%d), ", diretores[i].filmes[j].nome, diretores[i].filmes[j].ano);
        }
        printf("\n\n");
      }
    }
    printf("Digite o nome do diretor que deseja procurar: ");
    scanf("%s", nome);
  }
}

EX 17 -----------------------




#include <stdio.h>

/*
17 - Definir a estrutura cuja representação gráfica é dada a seguir, definir os campos com os tipos 
básicos necessários e implementar o que se pede.  
O Cadastro é composto de: 
Nome Endereço Salário 
Identidade CPF Estado Civil 
Telefone Idade Sexo 
 
O Endereço é composto de: 
Rua Bairro Cidade 
Estado CEP  
 
a) Crie um vetor Cadastro com 5 elementos; 
b) Permita ao usuário entrar com dados para preencher esses 5 cadastros; 
c) Encontre a pessoa com maior idade entre os cadastrados; 
d) Encontre as pessoas do sexo masculino; 
e) Encontre as pessoas com sal  ́ ario maior que 1000; 
f) Imprima  os  dados  da  pessoa  cuja  identidade  seja  igual  a  um  valor  fornecido  pelo 
usuário. 
*/

struct Endereco
{
  char rua[100];
  char bairro[100];
  char cidade[100];
  char estado[100];
  char cep[100];
};

struct Cadastro
{
  char nome[100];
  struct Endereco endereco;
  float salario;
  char identidade[100];
  char cpf[100];
  char estadoCivil[100];
  char telefone[100];
  int idade;
  char sexo[100];
};

int main(void)
{
  struct Cadastro cadastros[5];
  for (int i = 0; i < 5; i++)
  {
    printf("Digite o nome do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].nome);
    printf("Digite a rua do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].endereco.rua);
    printf("Digite o bairro do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].endereco.bairro);
    printf("Digite a cidade do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].endereco.cidade);
    printf("Digite o estado do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].endereco.estado);
    printf("Digite o cep do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].endereco.cep);
    printf("Digite o salario do cadastro %d: ", i + 1);
    scanf("%f", &cadastros[i].salario);
    printf("Digite a identidade do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].identidade);
    printf("Digite o cpf do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].cpf);
    printf("Digite o estado civil do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].estadoCivil);
    printf("Digite o telefone do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].telefone);
    printf("Digite a idade do cadastro %d: ", i + 1);
    scanf("%d", &cadastros[i].idade);
    printf("Digite o sexo do cadastro %d: ", i + 1);
    scanf("%s", cadastros[i].sexo);
    printf("\n");
  }

  int maiorIdade = 0, indiceMaiorIdade = 0;
  for (int i = 0; i < 5; i++)
  {
    if (cadastros[i].idade > maiorIdade)
    {
      maiorIdade = cadastros[i].idade;
      indiceMaiorIdade = i;
    }
  }
  printf("Pessoa com maior idade: %s\n", cadastros[indiceMaiorIdade].nome);

  printf("Pessoas do sexo masculino: ");
  for (int i = 0; i < 5; i++)
  {
    if (cadastros[i].sexo[0] == 'm')
    {
      printf("%s ", cadastros[i].nome);
    }
  }

  printf("\nPessoas com salario maior que 1000: ");
  for (int i = 0; i < 5; i++)
  {
    if (cadastros[i].salario > 1000)
    {
      printf("%s ", cadastros[i].nome);
    }
  }

  char identidade[100];

  printf("\nDigite a identidade da pessoa que deseja encontrar: ");
  setbuf(stdin, NULL);
  fgets(identidade, 100, stdin);

  for (int i = 0; i < 5; i++)
  {
    if (strcmp(cadastros[i].identidade, identidade) == 0)
    {
      printf("Nome: %s", cadastros[i].nome);
      printf("Rua: %s", cadastros[i].endereco.rua);
      printf("Bairro: %s", cadastros[i].endereco.bairro);
      printf("Cidade: %s", cadastros[i].endereco.cidade);
      printf("Estado: %s", cadastros[i].endereco.estado);
      printf("Cep: %s", cadastros[i].endereco.cep);
      printf("Salario: %f", cadastros[i].salario);
      printf("Identidade: %s", cadastros[i].identidade);
      printf("Cpf: %s", cadastros[i].cpf);
      printf("Estado civil: %s", cadastros[i].estadoCivil);
      printf("Telefone: %s", cadastros[i].telefone);
      printf("Idade: %d", cadastros[i].idade);
      printf("Sexo: %s", cadastros[i].sexo);
    }
  }


EX 18 -----------------------

#include <stdio.h>

/*18 - Escreva um programa que receba dois structs do tipo “dma”, cada um representando uma 
data válida, e calcule o número de dias que decorreram entre as duas datas. 
 
struct dma { 
    int dia; 
    int mes; 
    int ano; 
}; 
*/

struct dma
{
  int dia;
  int mes;
  int ano;
};

int main()
{
  struct dma data1, data2;
  printf("Digite a primeira data (dd/mm/aaaa):\n");
  scanf("%d/%d/%d", &data1.dia, &data1.mes, &data1.ano);

  printf("Digite a segunda data (dd/mm/aaaa):\n");
  scanf("%d/%d/%d", &data2.dia, &data2.mes, &data2.ano);

  int dias1 = data1.dia + (data1.mes * 30) + (data1.ano * 365);
  int dias2 = data2.dia + (data2.mes * 30) + (data2.ano * 365);

  int dias = dias2 - dias1;

  printf("Dias decorridos: %d\n", dias < 0 ? dias * -1 : dias);

  return 0;
}